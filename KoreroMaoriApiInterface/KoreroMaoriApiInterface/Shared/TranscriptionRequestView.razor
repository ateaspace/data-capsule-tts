@using KoreroMaoriApiInterface.Models;
@using System.Threading;

<div class="card">
    <div class="card-body">
        <EditForm EditContext="EditContext" OnValidSubmit="OnFormSubmit">
            <DataAnnotationsValidator />

            <div class="form-group">
                Audio File: <InputFile class="form-control-file" OnChange="OnInputFileChange" />
                <ValidationMessage For="() => Request.File" />
            </div>

            <button class="btn btn-primary" disabled="@IsProcessingTranscription">Transcribe</button>
        </EditForm>

        @if (IsProcessingTranscription)
        {
            <br />
            <div class="progress">
                <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width: 100%"></div>
            </div>
        }
    </div>
</div>

@if (CooldownError)
{
    <div class="alert alert-danger">
        You may only transcribe one file every @MAX_COOLDOWN_SEC seconds! @(CooldownTimeLeft)s remaining.
    </div>
}

@code {
    public const int MAX_COOLDOWN_SEC = 30;

    private CancellationTokenSource _cts;
    private bool _onCooldown;

    public EditContext EditContext;
    public TranscriptionRequest Request;
    public bool IsProcessingTranscription;
    public bool CooldownError;
    public int CooldownTimeLeft = 30;

    [Parameter]
    public Func<TranscriptionRequest, CancellationToken, Task> OnValidSubmit { get; set; }

    protected override void OnInitialized()
    {
        _cts = new CancellationTokenSource();
        Request = new TranscriptionRequest();
        EditContext = new EditContext(Request);
    }

    private Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        if (e.File is null)
            return Task.CompletedTask;

        Request.File = e.File;
        EditContext.NotifyFieldChanged(FieldIdentifier.Create(() => Request.File));
        return Task.CompletedTask;
    }

    private async Task OnFormSubmit()
    {
        if (_onCooldown)
        {
            CooldownError = true;
            return;
        }

        StartCooldown();

        IsProcessingTranscription = true;
        await OnValidSubmit.Invoke(Request, _cts.Token).ConfigureAwait(false);
        IsProcessingTranscription = false;
    }

    public void Dispose()
    {
        _cts.Cancel();
    }

    private void StartCooldown()
    {
        _onCooldown = true;
        CooldownTimeLeft = 30;
        Task.Run(() =>
        {
            while (CooldownTimeLeft > 0)
            {
                Task.Delay(1000).Wait();
                InvokeAsync(() =>
                {
                    CooldownTimeLeft -= 1;
                    StateHasChanged();
                });
            }

            InvokeAsync(() =>
            {
                _onCooldown = false;
                CooldownError = false;
                StateHasChanged();
            });
        });
    }
}
